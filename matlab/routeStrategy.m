%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  
% Copyright(c) 2022 
% Regents of the University of California. All rights reserved.
%  
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions
% are met:
%  
% 1. Redistributions of source code must retain the above copyright
%    notice, this list of conditions and the following disclaimer.
%  
% 2. Redistributions in binary form must reproduce the above copyright
%    notice, this list of conditions and the following disclaimer in the
%    documentation and/or other materials provided with the distribution.
%  
% 3. The names of its contributors may not be used to endorse or promote
%    products derived from this software without specific prior written
%    permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
% A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
% OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
% TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
% PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
% LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
% NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Jeff Krichmar, UC Irvine
%
% routeStrategy - Generates a path between two points using the 
%   learnedRoute. The path can be forward or reverse.
%
% @param map - grid map. values in map reflect cost of traversal.
% @param startX - x coordinate of starting location.
% @param startY - y coordinate of starting location.
% @param endX - x coordinate of goal location.
% @param endY - y coordinate of goal location.
% @param learnedRoute - set of (x,y) coordinates that follow the learned route.
% @param reverse - follow the route in reverse order if true.
% @param dispWave - displays spike wave and path if set to true.
% @return path - path generated by route strategy.
function path = routeStrategy (map, startX, startY, endX, endY, learnedRoute, reverse, dispWave)

global GOAL;
GOAL = [endX endY];
global START;
START = [startX startY];

rteInx=find(learnedRoute(:,1) == startX & learnedRoute(:,2) == startY);
pinx = 0;
foundGoal = false;
timeSteps = 0;

while ~foundGoal
    timeSteps = timeSteps + 1;
    pinx = pinx + 1;
    path(pinx).x = learnedRoute(rteInx,1);
    path(pinx).y = learnedRoute(rteInx,2);
    
    if path(pinx).x == endX && path(pinx).y == endY
        foundGoal = true;
    else
        if reverse
            rteInx = rteInx - 1;
            if rteInx < 1
                rteInx = size(learnedRoute,1);
            end
        else
            rteInx = rteInx + 1;
            if rteInx > size(learnedRoute,1)
                rteInx = 1;
            end
        end
    end
end

if dispWave
    dispMap = map;
    dispMap(path(1).x,path(1).y) = 50;
    for i = 2:pinx
        dispMap(path(i).x,path(i).y) = 20;
    end
    dispMap(path(end).x,path(end).y) = 75;
    imagesc(dispMap);
    axis square;
    axis off;
    if reverse
        title(['Route Reversed S(', num2str(startX), ',', num2str(startY), ') E(', num2str(endX), ',', num2str(endY), ')'])
    else
        title(['Route S(', num2str(startX), ',', num2str(startY), ') E(', num2str(endX), ',', num2str(endY), ')'])
    end
end

end